security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        users:
            entity:
                class: 'App\UserBundle\Entity'
                property: 'username'

    encoders:
        App\UserBundle\Entity:
            algorithm: bcrypt

    role_hierarchy:
        - ROLE_SUPER_ADMIN:
              - ROLE_DISTRIBUTOR_USER
              - ROLE_USER_BASIC
        - ROLE_DISTRIBUTOR_USER:
              - ROLE_DISTRIBUTOR_USER
              - ROLE_DISTRIBUTOR_MENU_USER
              - ROLE_BASIC_USER
        - ROLE_DISTRIBUTOR_MENU_USER:
              - ROLE_DISTRIBUTOR_MENU_USER
              - ROLE_BASIC_USER
        - ROLE_BASIC_USER:
              - ROLE_BASIC_USER

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: lazy
            provider: users_in_memory

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

        register:
            pattern:  ^/register
            stateless: true
            anonymous: true

        login:
            pattern:  ^/login
            stateless: true
            anonymous: true
            json_login:
                check_path:               /login_check
                success_handler:          lexik_jwt_authentication.handler.authentication_success
                failure_handler:          lexik_jwt_authentication.handler.authentication_failure

        publicApi:
            pattern:   ^/api/public
            stateless: true
            anonymous: true

        api:
            pattern:   ^/api/v1
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator


    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/login,  roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/public, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/v1,    roles: IS_AUTHENTICATED_FULLY }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
